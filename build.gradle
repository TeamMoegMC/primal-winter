buildscript {
    repositories {
        maven {
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

/**
 * Version in dev is set to 'dev'
 * Any builds produced by the github actions build script will have a version matching their tag.
 * All version numbers should be Semantic Versioning 2.0 compliant
 */
if (System.getenv('VERSION') != null) {
    version = System.getenv('VERSION')
} else {
    version = '1.16.4-2.0.5-TWR'
}
group = "com.alcatrazescapee.${mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_id}-forge-${mc_version}"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
}

minecraft {
    // Mappings used are generated by Mappificator (https://github.com/alcatrazEscapee/mappificator)
    // See the project README page for how to generate the mapping set.
    // Otherwise, we use official mappings in a build script version
    def officialVersion = System.getenv("OFFICIAL_MAPPINGS")
    if (officialVersion == null) {
        mappings channel: 'official', version: '1.16.5'
    } else {
        mappings channel: 'official', version: mc_version
    }
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Run configurations
    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=' + mod_id + '.mixins.json'
            property 'forge.logging.console.level', 'debug'
            mods {
                primalwinter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=' + mod_id + '.mixins.json'
            property 'forge.logging.console.level', 'debug'
            mods {
                primalwinter {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.2:processor"
    testAnnotationProcessor "org.spongepowered:mixin:0.8.2:processor"
}

// Puts the mod version into the jar for mods.toml to read from
jar {
    manifest {
        attributes ([
            "Implementation-Version": "${version}",
            "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
    finalizedBy('reobfJar')
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')

    include '**/*.java'
}

curseforge {
    project {
        def envApiKey = System.getenv('CURSEFORGE_API_KEY')
        apiKey = envApiKey == null ? 'nope' : envApiKey

        id = '393321' // Primal Winter
        changelog = "[Release Notes ${version}](https://github.com/alcatrazEscapee/primal-winter/releases/tag/v${version}-forge)"
        changelogType = 'markdown'

        releaseType = 'release' // Forge versions are marked release

        addGameVersion "${mc_version}"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

def getPrivateString(String key) {
    File propFile = file("private.properties")
    if (propFile.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if ((props[key]).isEmpty()) {
            return "NULL"
        } else return props[key]
    } else {
        return "NULL"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact deobfJar
            artifact sourcesJar
        }
    }
    repositories {
//        maven {
//            name = "TeamMoeg"
//            url = "http://server.teammoeg.com:8888/releases"
//            credentials {
//                username = getPrivateString("mavenUser")
//                password = getPrivateString("mavenToken")
//            }
//            authentication {
//                basic(BasicAuthentication)
//            }
//        }
        maven {
            name = "COS"
            url = "http://127.0.0.1:9999"
        }
    }
}